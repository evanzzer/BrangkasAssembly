;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   Fri Apr 9 2021
; Processor: AT89C51
; Compiler:  ASEM-51 (Proteus)
;====================================================================

$NOMOD51
$INCLUDE (8051.MCU)


DATAPASS EQU 500H
PRESSED BIT 0H

ORG 00H
	MOV P1, #0F9H	; SWITCH, PUSH BUTTON, LCD PIN
	MOV P2, #0FFH	; KEYPAD
	MOV P3, #0FFH	; LCD DATA PIN
	MOV DPTR, #DATAPASS ; MOV PASSWORD
	
INIT:	MOV P2, #0FFH ; NULLIFY ALL I/O PORT
	MOV P1, #0F9H
	MOV R0, #04H

; KEYPAD CODE, A TO D AS OUTPUT, 1 TO 3 AS INPUT
CHECK:	MOV A, #01H ; RANGE 1-3, 1 AS DEFAULT
	MOV P2, #0FEH	; SET ACTIVE BIT TO P2.0
	ACALL COLCHK	; CHECK INPUT

	JB PRESSED, STORE	; STORE IF THERE IS INPUT

	MOV A, #04H		; RANGE 4-6, 4 AS DEFAULT
	MOV P2, #0FDH	; SET ACTIVE BIT TO P2.1
	ACALL COLCHK	; CHECK INPUT

	JB PRESSED, STORE	; STORE IF THERE IS INPUT

	MOV A, #07H		; RANGE 7-9, 7 AS DEFAULT
	MOV P2, #0FBH	; SET ACTIVE BIT TO P2.2
	ACALL COLCHK

	JB PRESSED, STORE

	MOV A, #00H		; ONLY 0 EXIST IN THIS ROW
	MOV P2, #0F7H	; SET ACTIVE BIT TO P2.3
	ACALL COLZERO	; CHECK IF 0 WAS PRESSED

	JB PRESSED, STORE

	JMP CHECK	; NOTHING, BACK TO CHECKING

COLCHK:	CLR PRESSED	; SET BOOLEAN TO FALSE

	JB P2.4, COL_2	; NOTHING PRESSED IN (1), MOVE TO NEXT COL
	JNB P2.4, $		; WAIT UNTIL BUTTON HAS BEEN RELEASED 
	SETB PRESSED	; BUTTON HAS BEEN PRESSED, SET BOOLEAN TO TRUE
	RET

COL_2:	JB P2.5, COL_3	; NOTHING PRESSED 
	JNB P2.5, $		; WAIT TILL BUTTON HAS BEEN RELEASED
	INC A			; ADD DEFAULT VALUE BY 1
	SETB PRESSED	; SET BOOLEAN TO TRUE
	RET

COL_3:	JB P2.6, RETURN	; NOTHING HAS BEEN PRESSED HERE. CURRENT ROW DOESN'T HAVE ANY INPUT
	JNB P2.6, $		; WAIT TILL BUTTON HAS BEEN RELEASED
	INC A			; ADD DEFAULT VALUE BY 2
	INC A
	SETB PRESSED
RETURN:	RET

COLZERO:JB P2.5, RETURN	; NOTHING HAS BEEN PRESSED HERE. NO INPUT
	JNB P2.5, $
	SETB PRESSED
	RET

STORE:	MOV @R0, A	; STORE TO THE REGISTER POINTED BY R0 (INDIRECT ADDRESSING)
	DJNZ R0, BACK	; CHECK IF 4 NUMBER HAS BEEN INPUT
	MOV R0, #04H	; IF YES, VALIDATING INPUT
	SJMP VERIFY
	
BACK:	ACALL SLEEP	; RETURN TO THE KEYPAD FOR SOME MORE INPUTS
	LJMP CHECK

VERIFY:	MOV A, R0	; MOVE THE CURRENT ITERATOR TO ACCUMULATOR
	DEC A			; DECREMENT, DPTR STARTS FROM 0, NOT 1
	MOVC A, @A+DPTR	; MOVE THE CONTENT OF THE ROM TO THE ACCUMULATOR (INDEX ADDRESSING)
	XRL A, @R0		; XOR A WITH THE REGISTER THE ITERATOR IS POINTING TO (INDIRECT ADDRESSING)
	MOV R6, A		; MOVE THE RESULT TO R6 (DIRECT ADDRESSING)
	CJNE R6, #00H, ERRBACK	; CHECK IF R6 VALUE IS NOT 0 (0 MEANS PIN IS INCORRECT)
	DJNZ R0, VERIFY	; CHECK IF 4 NUMBER HAS BEEN VALIDATED AND CORRECT

	SETB P1.2		; LIGHT UP THE GREEN LED
	JB P1.0, $		; WAIT TILL PUSH BUTTON HAS BEEN PRESSED
	CLR P1.2		; TURN OFF THE GREEN LED
	LJMP INIT		; RETURN BACK TO START
	
ERRBACK:SETB P1.1	; ERROR IN VALIDATING, LIGHT UP THE RED LED
	ACALL DELAY		; DELAY FOR 1S
	LJMP INIT		; RETURN BACK TO START

SLEEP:  MOV R7, #01H; QUICK DELAY (65ms)
	SJMP TIMER		
DELAY:	MOV R7, #2AH; DELAY FOR approx. 3s
TIMER:	MOV TMOD, #01H	; TIMER LOGIC
	SETB TR0
	JNB TF0, $
	CLR TR0
	CLR TF0
	DJNZ R7, TIMER
	RET

; LCD WORDS TO BE DISPLAYED
ERRTXT1: DB 'INCORRECT', 0
ERRTXT2: DB 'PASSWORD', 0

SUCCESS: DB 'OPEN', 0

ORG 500H
PASS: 	DB 01H, 02H, 03H, 04H

END