;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   Fri Apr 9 2021
; Processor: AT89C51
; Compiler:  ASEM-51 (Proteus)
;====================================================================

$NOMOD51
$INCLUDE (8051.MCU)

DATAPASS EQU 500H
PRESSED BIT 0H

ORG 00H
	MOV P1, #0F9H	; SWITCH, PUSH BUTTON, LCD PIN
	MOV P2, #0FFH	; KEYPAD

	; LCD INITIALIZATION
	MOV A, #38H		; 16x2, 5x7 DOT MATRIC DISPLAY
	ACALL COMM
	MOV A, #0CH		; SET LCD DISPLAY ON, CURSOR OFF, BLINKING OFF
	ACALL COMM
	
INIT:	MOV A, #01H	; CLEAR THE DISPLAY
	ACALL COMM
	MOV P2, #0FFH 	; NULLIFY ALL I/O PORT
	MOV P1, #0F9H
	MOV R0, #04H

	MOV A, #84H		; SET LCD CURSOR TO 1st ROW, 4th COLUMN
	ACALL COMM
	MOV DPTR, #PWDTXT	; DISPLAY THE PASSWORD TEXT
	ACALL READSTR
	MOV A, #0C6H	; SET LCD CURSOR TO 2nd ROW, 6th COLUMN
	ACALL COMM

; === KEYPAD CODE, A TO D AS OUTPUT, 1 TO 3 AS INPUT ===
CHECK:	MOV A, #01H ; RANGE 1-3, 1 AS DEFAULT
	MOV P2, #0FEH	; SET ACTIVE BIT TO P2.0
	ACALL COLCHK	; CHECK INPUT

	JB PRESSED, STORE	; STORE IF THERE IS INPUT

	MOV A, #04H		; RANGE 4-6, 4 AS DEFAULT
	MOV P2, #0FDH	; SET ACTIVE BIT TO P2.1
	ACALL COLCHK	; CHECK INPUT

	JB PRESSED, STORE	; STORE IF THERE IS INPUT

	MOV A, #07H		; RANGE 7-9, 7 AS DEFAULT
	MOV P2, #0FBH	; SET ACTIVE BIT TO P2.2
	ACALL COLCHK

	JB PRESSED, STORE

	MOV A, #00H		; ONLY 0 EXIST IN THIS ROW
	MOV P2, #0F7H	; SET ACTIVE BIT TO P2.3
	ACALL COLZERO	; CHECK IF 0 WAS PRESSED

	JB PRESSED, STORE

	JMP CHECK	; NOTHING, BACK TO CHECKING

COLCHK:	CLR PRESSED	; SET BOOLEAN TO FALSE

	JB P2.4, COL_2	; NOTHING PRESSED IN (1), MOVE TO NEXT COL
	JNB P2.4, $		; WAIT UNTIL BUTTON HAS BEEN RELEASED 
	SETB PRESSED	; BUTTON HAS BEEN PRESSED, SET BOOLEAN TO TRUE
	RET

COL_2:	JB P2.5, COL_3	; NOTHING PRESSED 
	JNB P2.5, $		; WAIT TILL BUTTON HAS BEEN RELEASED
	INC A			; ADD DEFAULT VALUE BY 1
	SETB PRESSED	; SET BOOLEAN TO TRUE
	RET

COL_3:	JB P2.6, RETURN	; NOTHING HAS BEEN PRESSED HERE. CURRENT ROW DOESN'T HAVE ANY INPUT
	JNB P2.6, $		; WAIT TILL BUTTON HAS BEEN RELEASED
	INC A			; ADD DEFAULT VALUE BY 2
	INC A
	SETB PRESSED

; == RETURN TO LAST ACALL ==
RETURN:	RET

; ===== STORE SECTION =====
COLZERO:JB P2.5, RETURN	; NOTHING HAS BEEN PRESSED HERE. NO INPUT
	JNB P2.5, $
	SETB PRESSED
	RET

STORE:	MOV @R0, A	; STORE TO THE REGISTER POINTED BY R0 (INDIRECT ADDRESSING)
	MOV A, #2AH		; SHOW INPUTTED PASSWORD AS AN ASTERISK
	ACALL DISP		; DISPLAY IN LCD
	DJNZ R0, BACK	; CHECK IF 4 NUMBER HAS BEEN INPUT
	MOV R0, #04H	; IF YES, VALIDATING INPUT
	MOV DPTR, #DATAPASS ; MOV PASSWORD
	MOV A, #01H		; CLEAR LCD
	ACALL COMM
	SJMP VERIFY
	
BACK:	ACALL SLEEP	; RETURN TO THE KEYPAD FOR SOME MORE INPUTS
	LJMP CHECK

; ===== VERIFY SECTION =====
VERIFY:	MOV A, R0	; MOVE THE CURRENT ITERATOR TO ACCUMULATOR
	DEC A			; DECREMENT, DPTR STARTS FROM 0, NOT 1
	MOVC A, @A+DPTR	; MOVE THE CONTENT OF THE ROM TO THE ACCUMULATOR (INDEX ADDRESSING)
	XRL A, @R0		; XOR A WITH THE REGISTER THE ITERATOR IS POINTING TO (INDIRECT ADDRESSING)
	MOV R6, A		; MOVE THE RESULT TO R6 (DIRECT ADDRESSING)
	CJNE R6, #00H, ERRBACK	; CHECK IF R6 VALUE IS NOT 0 (0 MEANS PIN IS INCORRECT)
	DJNZ R0, VERIFY	; CHECK IF 4 NUMBER HAS BEEN VALIDATED AND CORRECT

	; VALIDATED PIN CODE GOES HERE
	SETB P1.2		; LIGHT UP THE GREEN LED
	MOV A, #86H		; SET LCD CURSOR TO 1st ROW, 6th COLUMN
	ACALL COMM
	MOV DPTR, #OPNTXT	; DISPLAY THE SUCCCESS TEXT
	ACALL READSTR
	ACALL SRVOPEN	; OPEN THE LOCK WITH SERVO
	JB P1.0, $		; WAIT TILL PUSH BUTTON HAS BEEN PRESSED
	CLR P1.2		; TURN OFF THE GREEN LED
	ACALL SRVCLR	; CLOSE THE LOCK WITH SERVO
	LJMP INIT		; RETURN BACK TO START
	
ERRBACK:SETB P1.1	; ERROR IN VALIDATING, LIGHT UP THE RED LED
	MOV A, #84H		; SET LCD CURSOR TO 1st ROW, 4th COLUMN
	ACALL COMM
	MOV DPTR, #ERRTXT	; DISPLAY THE FIRST ERROR TEXT
	ACALL READSTR
	MOV A, #0C4H		; SET LCD CURSOR TO 2nd ROW, 4th COLUMN
	ACALL COMM
	MOV DPTR, #PWDTXT	; DISPLAY THE SECOND ERROR TEXT
	ACALL READSTR
	ACALL DELAY		; DELAY FOR 1S
	LJMP INIT		; RETURN BACK TO START

; ===== LCD SECTIONS =====
COMM:   ACALL SLEEP ; QUICK DELAY
    MOV P3, A		; SET THE DATA PIN FROM ACCUMULATOR
    CLR P1.5 ; RS
    CLR P1.6 ; RW
    SETB P1.7 ; EN
    CLR P1.7 ; EN
    RET

READSTR: MOV A, #00H ; NULLIFY THE ACCUMULATOR
	MOVC A, @A+DPTR	; FETCH THE ASCII CODE USING INDEXED ADDRESSING
	JZ RETURN		; CHECK IF THE ACCUMULATOR'S VALUE IS 0
	ACALL DISP		; IF NOT, DISPLAY THE CHARACTER TO LCD
	INC DPTR		; INCREMENT DPTR SO NEXT CHARACTER IS BEING FETCHED
	SJMP READSTR	; RETURN BACK TO FETCH ANOTHER CHARACTER

DISP:   ACALL SLEEP	; QUICK DELAY
    MOV P3, A		; SET THE DATA PIN FROM ACUMULATOR
    SETB P1.5 ; RS
    CLR P1.6  ; RW
    SETB P1.7 ; EN
    CLR P1.7  ; EN
    RET

; ===================================================
; | CREATE A PULSE OF 1.5ms FOR SERVO TO GO 0 DEGREE
; | TO DO IS DO FFFF - FA25 + 1 = 05DB = 1500 DEC   
; | SO WE SET TH AND TL TO FA AND 25 SO THE TIMER   
; | WILL COUNT TO 1 0000 WITH 1 IS TF0 (CARRY)      
; ===================================================
SRVCLR:	MOV TH0, #0FAH 
    MOV TL0, #24H 
    SETB P1.3 	; SET SERVO PIN TO HIGH
    SETB TR0 	; START THE TIMER
    JNB TF0, $ 	; WAIT TILL TF0 IS ON
    CLR P1.3 	; CLEAR SERVO PIN BIT
    CLR TF0 	; CLEAR THE FLAG MANUALLY
    CLR TR0 	; STOP THE TIMER
    RET 

; ===================================================
; | CREATE A PULSE OF 2.0ms FOR SERVO TO GO 0 DEGREE
; | TO DO IS DO FFFF - F830 + 1 = 07D0 = 2000 DEC   
; | SO WE SET TH AND TL TO F8 AND 30 SO THE TIMER   
; | WILL COUNT TO 1 0000 WITH 1 IS TF0 (CARRY)      
; ===================================================
SRVOPEN: MOV TH0, #0F8H 
    MOV TL0, #30H 
    SETB P1.3 	; SET SERVO PIN TO HIGH
    SETB TR0 	; START THE TIMER
    JNB TF0, $ 	; WAIT TILL TF0 IS ON
    CLR P1.3 	; CLEAR SERVO PIN BIT
    CLR TF0 	; CLEAR THE FLAG MANUALLY
    CLR TR0 	; STOP THE TIMER
    RET 

; ===== TIMER SECTION =====
SLEEP:  MOV R7, #01H; QUICK DELAY (65ms)
	SJMP TIMER		
DELAY:	MOV R7, #2AH; DELAY FOR approx. 3s
TIMER:	MOV TMOD, #01H	; TIMER LOGIC
	SETB TR0
	JNB TF0, $
	CLR TR0
	CLR TF0
	DJNZ R7, TIMER
	RET

; LCD WORDS TO BE DISPLAYED

PWDTXT: DB 'PASSWORD', 0
ERRTXT: DB 'INCORRECT', 0
OPNTXT: DB 'OPEN', 0

ORG 500H
PASS: 	DB 04H, 03H, 02H, 01H

END